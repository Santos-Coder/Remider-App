{"version":3,"sources":["Components/App.js","actions/actions.js","types.js","reducers/reducer.js","index.js","Components/logo-2.png"],"names":["App","state","text","date","Date","renderReminders","reminders","props","className","map","reminder","key","id","moment","fromNow","onClick","remove_reminder","src","logo","type","value","this","placeholder","onChange","e","setState","target","placeholderText","selected","showTimeSelect","timeCaption","dateFormat","add_reminder","clear_reminders","Component","connect","reducer","action","read_cookie","filter","bake_cookie","Math","random","store","createStore","ReactDOM","render","document","getElementById","module","exports"],"mappings":"yRAQMA,E,4MACFC,MAAQ,CACJC,KAAM,GACNC,KAAM,IAAIC,M,EAGdC,gBAAkB,WAAO,IACdC,EAAa,EAAKC,MAAlBD,UACP,OACI,wBAAIE,UAAU,cAENF,EAAUG,KAAI,SAAAC,GACV,OACI,wBAAIC,IAAKD,EAASE,GAAIJ,UAAU,mBAC5B,6BAAME,EAASR,MACf,6BAAMW,IAAO,IAAIT,KAAKM,EAASP,OAAOW,WACtC,yBAAKN,UAAU,YAAYO,QAAW,kBAAM,EAAKR,MAAMS,gBAAgBN,EAASE,MAAhF,W,uDAQlB,IAAD,OACL,OACI,yBAAKJ,UAAU,OAEX,yBAAKS,IAAMC,MAEX,yBAAKV,UAAU,kBACX,oDAGJ,2BAAOA,UAAU,eAAeW,KAAK,OACrCC,MAAOC,KAAKpB,MAAMC,KAClBoB,YAAY,6BACZC,SAAY,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACvB,KAAMsB,EAAEE,OAAON,WAEjD,kBAAC,IAAD,CACAZ,UAAU,eACVmB,gBAAgB,6BAChBP,MAAOC,KAAKpB,MAAME,KAClByB,SAAUP,KAAKpB,MAAME,KACrBoB,SAAU,SAACpB,GAAU,EAAKsB,SAAS,CAACtB,KAAMA,KAC1C0B,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAGX,4BAAQvB,UAAU,4BAClBO,QAAS,WACT,EAAKR,MAAMyB,aAAa,EAAK/B,MAAMC,KAAM,EAAKD,MAAME,MACpD,EAAKsB,SAAS,CAACvB,KAAM,GAAIC,KAAM,OAH/B,gBAMCkB,KAAKhB,kBAEN,4BAAQG,UAAU,2BAClBO,QAAS,kBAAM,EAAKR,MAAM0B,oBAD1B,uB,GA1DEC,aAkEHC,eAAQ,SAAAlC,GACnB,MAAO,CACHK,UAAWL,KAEhB,CAAC+B,aC5EwB,SAAC9B,EAAMC,GAM/B,MALe,CACXgB,KCHoB,eDIpBjB,OACAC,SDwEUa,gBCnEa,SAACJ,GAK5B,MAJe,CACXO,KCXuB,kBDYvBP,ODgE2BqB,gBC3DJ,WAI3B,MAHe,CACXd,KClBuB,qBFuEhBgB,CAIsCnC,G,iCGrDtCoC,EAtBC,WAAuB,IAAtBnC,EAAqB,uDAAf,GAAIoC,EAAW,uCAC9B/B,EAAY,KAGhB,OAFAL,EAAQqC,sBAAY,aDJI,iBCMrBD,EAAOlB,KDLiB,oBCQhBkB,EAAOlB,MACdb,EAAYL,EAAMsC,QAAO,SAAA7B,GAAQ,OAAIA,EAASE,IAAMyB,EAAOzB,MAC3D4B,sBAAY,YAAalC,GAClBA,GDVgB,oBCWhB+B,EAAOlB,MACdb,EAAY,GACZkC,sBAAY,YAAalC,GAClBA,GAEAL,GAXPK,EAAS,sBAAOL,GAAP,CAAc,CAACC,KAAMmC,EAAOnC,KAAOC,KAAMkC,EAAOlC,KAAOS,GAAI6B,KAAKC,YACzEF,sBAAY,YAAalC,GAYtBA,ICZLqC,G,OAAQC,YAAYR,IAE1BS,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEJI,SAASC,eAAe,U,mBCf5BC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.2e0414d4.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport {add_reminder, remove_reminder, clear_reminders} from '../actions/actions';\r\nimport {connect} from 'react-redux';\r\nimport moment from 'moment';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport logo from './logo-2.png'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        text: '',\r\n        date: new Date()\r\n    }\r\n\r\n    renderReminders = () => {\r\n        const {reminders} = this.props;\r\n        return (\r\n            <ul className=\"list-group\">\r\n                {\r\n                    reminders.map(reminder => {\r\n                        return (\r\n                            <li key={reminder.id} className=\"list-group-item\">\r\n                                <div>{reminder.text}</div>\r\n                                <div>{moment(new Date(reminder.date)).fromNow()}</div>\r\n                                <div className=\"closeIcon\" onClick = {() => this.props.remove_reminder(reminder.id)}>X</div>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            )\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                <img src= {logo} />\r\n\r\n                <div className=\"reminder-title\">\r\n                    <h1>What Should  U Do ?</h1>\r\n                </div>\r\n\r\n                <input className=\"form-control\" type=\"text\"\r\n                value={this.state.text}\r\n                placeholder=\"What Do U want To Do ... ?\"\r\n                onChange = {(e) => this.setState({text: e.target.value})} />\r\n\r\n                <DatePicker\r\n                className=\"form-control\"\r\n                placeholderText=\"When Do U want To Do ... ?\"\r\n                value={this.state.date}\r\n                selected={this.state.date}\r\n                onChange={(date) => {this.setState({date: date})}}\r\n                showTimeSelect\r\n                timeCaption=\"Time\"\r\n                dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                />\r\n\r\n                <button className=\"btn btn-primary btn-block\"\r\n                onClick={() => {\r\n                this.props.add_reminder(this.state.text, this.state.date)\r\n                this.setState({text: '', date: ''})\r\n                }}>Add Reminder</button>\r\n\r\n                {this.renderReminders()}\r\n\r\n                <button className=\"btn btn-danger btn-block\"\r\n                onClick={() => this.props.clear_reminders()}>Clear Reminder</button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(state => {\r\n    return {\r\n        reminders: state\r\n    }\r\n}, {add_reminder, remove_reminder, clear_reminders})(App);","import {ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDERS} from '../types';\r\n\r\nexport const add_reminder = (text, date) => {\r\n    const action = {\r\n        type: ADD_REMINDER,\r\n        text,\r\n        date\r\n    }\r\n    return action\r\n}\r\n\r\nexport const remove_reminder = (id) => {\r\n    const action = {\r\n        type: REMOVE_REMINDER,\r\n        id\r\n    }\r\n    return action\r\n}\r\n\r\nexport const clear_reminders = () => {\r\n    const action = {\r\n        type: CLEAR_REMINDERS,\r\n    }\r\n    return action\r\n}","\r\nexport const ADD_REMINDER = 'ADD_REMINDER'\r\nexport const REMOVE_REMINDER = 'REMOVE_REMINDER'\r\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS'","import {ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDERS} from '../types';\r\nimport { bake_cookie, read_cookie} from 'sfcookies'\r\n\r\nconst reducer = (state=[], action) => {\r\n    let reminders = null;\r\n    state = read_cookie('reminders')\r\n\r\n    if(action.type === ADD_REMINDER) {\r\n        reminders = [...state, {text: action.text , date: action.date , id: Math.random()}]\r\n        bake_cookie('reminders', reminders)\r\n    } else if (action.type === REMOVE_REMINDER){\r\n        reminders = state.filter(reminder => reminder.id != action.id)\r\n        bake_cookie('reminders', reminders)\r\n        return reminders\r\n    } else if (action.type === CLEAR_REMINDERS){\r\n        reminders = [];\r\n        bake_cookie('reminders', reminders)\r\n        return reminders\r\n    } else {\r\n        return state\r\n    }\r\n    return reminders\r\n}\r\n\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from'react-dom';\r\nimport App from './Components/App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport reducer from './reducers/reducer';\r\nimport './index.css';\r\n\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)","module.exports = __webpack_public_path__ + \"static/media/logo-2.57cb088d.png\";"],"sourceRoot":""}